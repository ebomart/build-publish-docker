
    name: "Build and push image"
    description: "Builds and pushes an image to a registry"
    
    inputs:
      registry_host:
        description: "Image registry host e.g. us.gcr.io"
        required: true
      gke_project:
        description: "Name of gke project"
        required: true
      image_name:
        description: "Name of image"
        required: true
      sha:
        description: "Image tag"
        required: true
      registry_username:
        description: "Registry username"
        required: false
      registry_password:
        description: "Registry password"
        required: false

    outputs:
      container_image_exists:
        description: "Check if image exists in GCR registry"
        value: ${{ steps.check-image-exists.outputs.exists }}
      
    runs:
      using: "composite"
      steps:
      - id: check-image-exists
        shell: bash
        run: |
            set +e
            tags=$(gcloud container images list-tags ${{ inputs.registry_host }}/${{ inputs.gke_project }}//${{ inputs.image_name }} --filter="tags:${{ inputs.sha }}" --format=json)
            if [[ "$tags" == "[]" ]]; then
                echo "Image not found, Building"
                echo "::set-output name=exists::0"
            else
                echo "::set-output name=exists::1"
                echo "Image already exists"
            fi
    
      # - name: Login to Container Registry
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ${{ inputs.registry_host }}
      #     username: ${{ inputs.registry_username }}
      #     password: ${{ inputs.registry_password }}
    
      # - name: Set branch name as env variable
      #   run: |
      #     currentbranch=$(echo ${GITHUB_REF##*/})
      #     echo "running on $currentbranch"
      #     echo "BRANCH=$currentbranch" >> $GITHUB_ENV
      #   shell: bash
    
      # - name: Compose build ${{ inputs.service }}
      #   shell: bash
      #   run: sudo -E docker-compose build ${{ inputs.service }}
      #   working-directory: ./src
      #   env:
      #     TAG: ${{ env.BRANCH }}
      #     REGISTRY: ${{ inputs.registry_endpoint }}
    
      # - name: Compose push ${{ inputs.service }}
      #   shell: bash
      #   run: sudo -E docker-compose push ${{ inputs.service }}
      #   working-directory: ./src
      #   env:
      #     TAG: ${{ env.BRANCH }}
      #     REGISTRY: ${{ inputs.registry_endpoint }}
    
      # - name: Create multiarch manifest
      #   shell: bash
      #   run: |
      #     docker --config ~/.docker manifest create ${{ inputs.registry_endpoint }}/${{ inputs.image_name }}:${{ env.BRANCH }} ${{ inputs.registry_endpoint }}/${{ inputs.image_name }}:linux-${{ env.BRANCH }}
      #     docker --config ~/.docker manifest push ${{ inputs.registry_endpoint }}/${{ inputs.image_name }}:${{ env.BRANCH }}

